//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Tools/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""TEST"",
            ""id"": ""bac1c8d0-813b-4fc7-9f56-35082e2af092"",
            ""actions"": [
                {
                    ""name"": ""test"",
                    ""type"": ""Button"",
                    ""id"": ""3f4337ce-7be3-4349-bb6b-0fcd7cbfcd08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""664d288d-6714-47e3-8dc3-8b290b763aeb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""typing"",
            ""id"": ""694e0b60-b100-4a98-9e94-c9479aca982d"",
            ""actions"": [
                {
                    ""name"": ""key"",
                    ""type"": ""Button"",
                    ""id"": ""14757ac2-104d-47e9-a254-35cb6b0fc0cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e60bb28a-fad3-4801-aaf5-354c7127a01c"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TEST
        m_TEST = asset.FindActionMap("TEST", throwIfNotFound: true);
        m_TEST_test = m_TEST.FindAction("test", throwIfNotFound: true);
        // typing
        m_typing = asset.FindActionMap("typing", throwIfNotFound: true);
        m_typing_key = m_typing.FindAction("key", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TEST
    private readonly InputActionMap m_TEST;
    private ITESTActions m_TESTActionsCallbackInterface;
    private readonly InputAction m_TEST_test;
    public struct TESTActions
    {
        private @PlayerInputs m_Wrapper;
        public TESTActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @test => m_Wrapper.m_TEST_test;
        public InputActionMap Get() { return m_Wrapper.m_TEST; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TESTActions set) { return set.Get(); }
        public void SetCallbacks(ITESTActions instance)
        {
            if (m_Wrapper.m_TESTActionsCallbackInterface != null)
            {
                @test.started -= m_Wrapper.m_TESTActionsCallbackInterface.OnTest;
                @test.performed -= m_Wrapper.m_TESTActionsCallbackInterface.OnTest;
                @test.canceled -= m_Wrapper.m_TESTActionsCallbackInterface.OnTest;
            }
            m_Wrapper.m_TESTActionsCallbackInterface = instance;
            if (instance != null)
            {
                @test.started += instance.OnTest;
                @test.performed += instance.OnTest;
                @test.canceled += instance.OnTest;
            }
        }
    }
    public TESTActions @TEST => new TESTActions(this);

    // typing
    private readonly InputActionMap m_typing;
    private ITypingActions m_TypingActionsCallbackInterface;
    private readonly InputAction m_typing_key;
    public struct TypingActions
    {
        private @PlayerInputs m_Wrapper;
        public TypingActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @key => m_Wrapper.m_typing_key;
        public InputActionMap Get() { return m_Wrapper.m_typing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TypingActions set) { return set.Get(); }
        public void SetCallbacks(ITypingActions instance)
        {
            if (m_Wrapper.m_TypingActionsCallbackInterface != null)
            {
                @key.started -= m_Wrapper.m_TypingActionsCallbackInterface.OnKey;
                @key.performed -= m_Wrapper.m_TypingActionsCallbackInterface.OnKey;
                @key.canceled -= m_Wrapper.m_TypingActionsCallbackInterface.OnKey;
            }
            m_Wrapper.m_TypingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @key.started += instance.OnKey;
                @key.performed += instance.OnKey;
                @key.canceled += instance.OnKey;
            }
        }
    }
    public TypingActions @typing => new TypingActions(this);
    public interface ITESTActions
    {
        void OnTest(InputAction.CallbackContext context);
    }
    public interface ITypingActions
    {
        void OnKey(InputAction.CallbackContext context);
    }
}
